{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,kBAASC,IAIN,MAAM,OAHGC,KAAKC,MAAsB,IAAhBD,KAAKE,aAChBF,KAAKC,MAAsB,IAAhBD,KAAKE,aAChBF,KAAKC,MAAsB,IAAhBD,KAAKE,Y,CAoD5B,SAASC,EAAcC,EAAUC,GAC/B,MAAMC,EAAgBN,KAAKE,SAAW,GACtC,OAAO,IAAIK,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACLJ,EACFE,EAAQ,C,SAAEJ,E,MAAUC,IAEpBI,EAAO,C,SAAEL,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CAlDXM,aAPF,WACE,MAAMC,EAASb,IACTc,EAASd,IACfe,SAASC,KAAKC,MAAMC,WAAa,6BAA6BL,MAAWC,I,GAIxC,KAqDnC,MAAMK,EAAOJ,SAASK,cAAc,SAC9BC,EAAaN,SAASK,cAAc,uBACpCE,EAAYP,SAASK,cAAc,sBACnCG,EAAcR,SAASK,cAAc,wBAE3CD,EAAKK,iBAAiB,UAAUC,IAC9BA,EAAMC,iBACN,MAAMC,EAAW,IAAIC,SAAST,GACxBU,EAAQC,SAASH,EAASI,IAAI,UAC9BC,EAAOF,SAASH,EAASI,IAAI,SAC7BE,EAASH,SAASH,EAASI,IAAI,WAErC,IAAK,IAAIG,EAAI,EAAGA,GAAKD,EAAQC,GAAK,EAAG,CAEnC9B,EAAc8B,EADOL,GAASK,EAAI,GAAKF,GAEpCG,MAAK,EAAC9B,SAAEA,EAAQC,MAAEA,MACjB8B,EAAAtC,GAASuC,OAAOC,QACd,uBAAqBjC,QAAiBC,MAAU,IAGnDiC,OAAM,EAAClC,SAAEA,EAAQC,MAAEA,MAClB8B,EAAAtC,GAASuC,OAAOG,QACd,sBAAoBnC,QAAeC,MAAU,G,CAIrDe,EAAWoB,MAAQ,GACnBnB,EAAUmB,MAAQ,GAClBlB,EAAYkB,MAAQ,EAAE","sources":["src/js/03-promises.js"],"sourcesContent":["function generateRandomColor() {\n  const r = Math.floor(Math.random() * 256); // Składowa czerwona (0-255)\n  const g = Math.floor(Math.random() * 256); // Składowa zielona (0-255)\n  const b = Math.floor(Math.random() * 256); // Składowa niebieska (0-255)\n  return `rgb(${r},${g},${b})`; // Format RGB\n}\n\nfunction updateBackgroundColor() {\n  const color1 = generateRandomColor();\n  const color2 = generateRandomColor();\n  document.body.style.background = `linear-gradient(to right, ${color1}, ${color2})`;\n}\n\n// Aktualizacja tła co sekundę\nsetInterval(updateBackgroundColor, 1000);\n\n// const colors = [\n//   '#FF5733',\n//   '#FFBD33',\n//   '#33FF57',\n//   '#33BDFF',\n//   '#5733FF',\n//   '#FF33BD',\n// ]; // Kolory zdefiniowane na kole kolorów\n\n// let currentIndex = 0;\n\n// function getNextColor() {\n//   const nextIndex = (currentIndex + 1) % colors.length;\n//   return colors[nextIndex];\n// }\n\n// function updateBackgroundColor() {\n//   const currentColor = colors[currentIndex];\n//   const nextColor = getNextColor();\n\n//   document.body.style.background = `linear-gradient(to right, ${currentColor}, ${nextColor})`;\n\n//   currentIndex = (currentIndex + 1) % colors.length;\n// }\n\n// // Aktualizacja tła co sekundę\n// setInterval(updateBackgroundColor, 1000);\n\n// function createPromise(position, delay) {\n//   const shouldResolve = Math.random() > 0.3;\n//   if (shouldResolve) {\n//     // Fulfill\n//   } else {\n//     // Reject\n//   }\n// }\n\nimport Notiflix from 'notiflix';\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\nconst form = document.querySelector('.form');\nconst delayInput = document.querySelector('input[name=\"delay\"]');\nconst stepInput = document.querySelector('input[name=\"step\"]');\nconst amountInput = document.querySelector('input[name=\"amount\"]');\n\nform.addEventListener('submit', event => {\n  event.preventDefault();\n  const formData = new FormData(form);\n  const delay = parseInt(formData.get('delay'));\n  const step = parseInt(formData.get('step'));\n  const amount = parseInt(formData.get('amount'));\n\n  for (let i = 1; i <= amount; i += 1) {\n    const currentDelay = delay + (i - 1) * step;\n    createPromise(i, currentDelay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n  }\n  delayInput.value = '';\n  stepInput.value = '';\n  amountInput.value = '';\n});\n"],"names":["$1GAPJ","parcelRequire","$47d4ff9957288465$var$generateRandomColor","Math","floor","random","$47d4ff9957288465$var$createPromise","position","delay","shouldResolve","Promise","resolve","reject","setTimeout","setInterval","color1","color2","document","body","style","background","$47d4ff9957288465$var$form","querySelector","$47d4ff9957288465$var$delayInput","$47d4ff9957288465$var$stepInput","$47d4ff9957288465$var$amountInput","addEventListener","event","preventDefault","formData","FormData","delay1","parseInt","get","step","amount","i","then","$parcel$interopDefault","Notify","success","catch","failure","value"],"version":3,"file":"03-promises.dcd166d4.js.map"}